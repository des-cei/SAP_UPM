// Generated register defines for safe_wrapper_ctrl

// Copyright information found in source file:
// Copyright lowRISC contributors.

// Licensing information found in source file:
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

#ifndef _SAFE_WRAPPER_CTRL_REG_DEFS_
#define _SAFE_WRAPPER_CTRL_REG_DEFS_

#ifdef __cplusplus
extern "C" {
#endif
// Register width
#define SAFE_WRAPPER_CTRL_PARAM_REG_WIDTH 32

// Configure Single, TMR, DMR or Lockstep
#define SAFE_WRAPPER_CTRL_SAFE_CONFIGURATION_REG_OFFSET 0x0
#define SAFE_WRAPPER_CTRL_SAFE_CONFIGURATION_SAFE_CONFIGURATION_MASK 0x3
#define SAFE_WRAPPER_CTRL_SAFE_CONFIGURATION_SAFE_CONFIGURATION_OFFSET 0
#define SAFE_WRAPPER_CTRL_SAFE_CONFIGURATION_SAFE_CONFIGURATION_FIELD \
  ((bitfield_field32_t) { .mask = SAFE_WRAPPER_CTRL_SAFE_CONFIGURATION_SAFE_CONFIGURATION_MASK, .index = SAFE_WRAPPER_CTRL_SAFE_CONFIGURATION_SAFE_CONFIGURATION_OFFSET })

// Select DMR_Mask *011* *110* *101*
#define SAFE_WRAPPER_CTRL_DMR_MASK_REG_OFFSET 0x4
#define SAFE_WRAPPER_CTRL_DMR_MASK_DMR_MASK_MASK 0x7
#define SAFE_WRAPPER_CTRL_DMR_MASK_DMR_MASK_OFFSET 0
#define SAFE_WRAPPER_CTRL_DMR_MASK_DMR_MASK_FIELD \
  ((bitfield_field32_t) { .mask = SAFE_WRAPPER_CTRL_DMR_MASK_DMR_MASK_MASK, .index = SAFE_WRAPPER_CTRL_DMR_MASK_DMR_MASK_OFFSET })

// Master Core Configuration
#define SAFE_WRAPPER_CTRL_MASTER_CORE_REG_OFFSET 0x8
#define SAFE_WRAPPER_CTRL_MASTER_CORE_MASTER_CORE_MASK 0x7
#define SAFE_WRAPPER_CTRL_MASTER_CORE_MASTER_CORE_OFFSET 0
#define SAFE_WRAPPER_CTRL_MASTER_CORE_MASTER_CORE_FIELD \
  ((bitfield_field32_t) { .mask = SAFE_WRAPPER_CTRL_MASTER_CORE_MASTER_CORE_MASK, .index = SAFE_WRAPPER_CTRL_MASTER_CORE_MASTER_CORE_OFFSET })

// critical_section
#define SAFE_WRAPPER_CTRL_CRITICAL_SECTION_REG_OFFSET 0xc
#define SAFE_WRAPPER_CTRL_CRITICAL_SECTION_CRITICAL_SECTION_BIT 0

// INIT IP based on configuration
#define SAFE_WRAPPER_CTRL_START_REG_OFFSET 0x10
#define SAFE_WRAPPER_CTRL_START_START_BIT 0

// boot_address
#define SAFE_WRAPPER_CTRL_BOOT_ADDRESS_REG_OFFSET 0x14

// External Debug Request Signal
#define SAFE_WRAPPER_CTRL_EXTERNAL_DEBUG_REQ_REG_OFFSET 0x18
#define SAFE_WRAPPER_CTRL_EXTERNAL_DEBUG_REQ_EXTERNAL_DEBUG_REQ_MASK 0x3
#define SAFE_WRAPPER_CTRL_EXTERNAL_DEBUG_REQ_EXTERNAL_DEBUG_REQ_OFFSET 0
#define SAFE_WRAPPER_CTRL_EXTERNAL_DEBUG_REQ_EXTERNAL_DEBUG_REQ_FIELD \
  ((bitfield_field32_t) { .mask = SAFE_WRAPPER_CTRL_EXTERNAL_DEBUG_REQ_EXTERNAL_DEBUG_REQ_MASK, .index = SAFE_WRAPPER_CTRL_EXTERNAL_DEBUG_REQ_EXTERNAL_DEBUG_REQ_OFFSET })

// Starting Sync Process as Master
#define SAFE_WRAPPER_CTRL_INITIAL_SYNC_MASTER_REG_OFFSET 0x1c
#define SAFE_WRAPPER_CTRL_INITIAL_SYNC_MASTER_INITIAL_SYNC_MASTER_BIT 0

// End_SW_Routine
#define SAFE_WRAPPER_CTRL_END_SW_ROUTINE_REG_OFFSET 0x20
#define SAFE_WRAPPER_CTRL_END_SW_ROUTINE_END_SW_ROUTINE_BIT 0

// Entry_Address
#define SAFE_WRAPPER_CTRL_ENTRY_ADDRESS_REG_OFFSET 0x24

// Safe_Copy_Address
#define SAFE_WRAPPER_CTRL_SAFE_COPY_ADDRESS_REG_OFFSET 0x28

// Interrupt_Controler
#define SAFE_WRAPPER_CTRL_INTERRUPT_CONTROLER_REG_OFFSET 0x2c
#define SAFE_WRAPPER_CTRL_INTERRUPT_CONTROLER_ENABLE_INTERRUPT_BIT 0
#define SAFE_WRAPPER_CTRL_INTERRUPT_CONTROLER_STATUS_INTERRUPT_BIT 1

// CB_HEEP_STATUS
#define SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_REG_OFFSET 0x30
#define SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_CORES_SLEEP_MASK 0x7
#define SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_CORES_SLEEP_OFFSET 0
#define SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_CORES_SLEEP_FIELD \
  ((bitfield_field32_t) { .mask = SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_CORES_SLEEP_MASK, .index = SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_CORES_SLEEP_OFFSET })
#define SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_CORES_DEBUG_MODE_MASK 0x7
#define SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_CORES_DEBUG_MODE_OFFSET 3
#define SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_CORES_DEBUG_MODE_FIELD \
  ((bitfield_field32_t) { .mask = SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_CORES_DEBUG_MODE_MASK, .index = SAFE_WRAPPER_CTRL_CB_HEEP_STATUS_CORES_DEBUG_MODE_OFFSET })

// DMR_REC
#define SAFE_WRAPPER_CTRL_DMR_REC_REG_OFFSET 0x34
#define SAFE_WRAPPER_CTRL_DMR_REC_DMR_REC_BIT 0

// DMR_REC
#define SAFE_WRAPPER_CTRL_INITIAL_STACK_ADDR_REG_OFFSET 0x38

#ifdef __cplusplus
}  // extern "C"
#endif
#endif  // _SAFE_WRAPPER_CTRL_REG_DEFS_
// End generated register defines for safe_wrapper_ctrl